"use client"
import { useState } from "react"
import { Nav } from "@/components/nav"
import { Button } from "@/components/ui/button"
import { Textarea } from "@/components/ui/textarea"
import { Card, CardContent } from "@/components/ui/card"
import { Loader2, Search } from "lucide-react"
import { useTokenStore } from "@/lib/store"
import { useRouter } from "next/navigation"
import { createClientComponentClient } from "@supabase/auth-helpers-nextjs"
import { Progress } from "@/components/ui/progress"
import { FeatureShowcase } from "@/components/FeatureShowcase"
import { Hero } from "@/components/Hero"
import { FAQ } from "@/components/FAQ"

export default function AIDetector() {
  const [text, setText] = useState("")
  const [isAnalyzing, setIsAnalyzing] = useState(false)
  const [progress, setProgress] = useState(0)
  const [result, setResult] = useState<{
    score: number
    humanLikelihood: string
    analysis: string
  } | null>(null)
  const { remainingWords, decrementWords } = useTokenStore()
  const router = useRouter()
  const supabase = createClientComponentClient()
  const [error, setError] = useState<string | null>(null)

  const calculateRequiredTokens = (text: string) => {
    return Math.ceil(text.length / 6)
  }

  const handleDetect = async () => {
    if (!text.trim()) return

    const requiredTokens = calculateRequiredTokens(text)
    if (requiredTokens > remainingWords) {
      router.push("/pricing")
      return
    }

    setIsAnalyzing(true)
    setProgress(0)
    setResult(null)
    setError(null)

    try {
      // Simulate API call with progress
      const timer = setInterval(() => {
        setProgress((prev) => {
          if (prev >= 95) {
            clearInterval(timer)
            return 95
          }
          return prev + 5
        })
      }, 100)

      // Simulate API response
      setTimeout(() => {
        clearInterval(timer)
        setProgress(100)

        // Simple detection simulation
        // Calculate a score based on text patterns that might indicate AI generation
        const patterns = [
          /\b(therefore|consequently|thus)\b/gi,
          /\b(utilize|employ)\b/gi,
          /\b(commence|initiate)\b/gi,
          /\b(furthermore|moreover|additionally)\b/gi,
          /\b(demonstrate|illustrate)\b/gi,
        ]

        let patternMatches = 0
        patterns.forEach((pattern) => {
          const matches = text.match(pattern)
          if (matches) patternMatches += matches.length
        })

        // Calculate score (0-100) where higher means more likely AI-generated
        const textLength = text.length
        const normalizedScore = Math.min(
          100,
          Math.max(0, (patternMatches / (textLength / 100)) * 20 + Math.random() * 30 + (text.length > 200 ? 20 : 0)),
        )

        let humanLikelihood = "Likely Human"
        let analysis =
          "The text appears to be written by a human. It contains natural language patterns and few indicators of AI generation."

        if (normalizedScore > 70) {
          humanLikelihood = "Likely AI"
          analysis =
            "The text shows strong indicators of AI generation. It contains formal language patterns and structures commonly found in AI-generated content."
        } else if (normalizedScore > 40) {
          humanLikelihood = "Possibly AI"
          analysis =
            "The text shows some indicators of AI generation, but also contains human-like elements. It may be AI-generated content that has been edited by a human."
        }

        setResult({
          score: Math.round(normalizedScore),
          humanLikelihood,
          analysis,
        })

        decrementWords(requiredTokens)
        setIsAnalyzing(false)
      }, 2000)
    } catch (err) {
      console.error("Error analyzing text:", err)
      const errorMessage = err instanceof Error ? err.message : "Failed to analyze"
      setError(errorMessage)
      setIsAnalyzing(false)
    }
  }

  return (
    <div className="min-h-screen bg-background px-5 md:px-10">
      <Nav />
      <main className="container py-12">
        <div className="text-center space-y-4 mb-12">
          <h1 className="text-4xl font-bold tracking-tighter sm:text-5xl md:text-6xl">AI Detector</h1>
          <p className="mx-auto max-w-[700px] text-muted-foreground">
            Analyze text to determine if it was written by a human or generated by AI.
          </p>
        </div>
        <div className="grid md:grid-cols-[2fr,1fr] gap-8 items-start">
          <div className="space-y-4">
            <Card className="p-6">
              <Textarea
                placeholder="Paste text here to analyze whether it was written by AI or a human."
                className="min-h-[300px] resize-none"
                value={text}
                onChange={(e) => setText(e.target.value)}
              />
              {error && <p className="mt-2 text-sm text-red-500">{error}</p>}
              <div className="mt-4">
                <Button
                  className="w-full bg-blue-400 hover:bg-blue-500"
                  onClick={handleDetect}
                  disabled={isAnalyzing || !text.trim() || calculateRequiredTokens(text) > remainingWords}
                >
                  {isAnalyzing ? (
                    <>
                      <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                      Analyzing...
                    </>
                  ) : (
                    <>
                      <Search className="mr-2 h-4 w-4" />
                      Detect AI ({calculateRequiredTokens(text)} words)
                    </>
                  )}
                </Button>
              </div>
              {calculateRequiredTokens(text) > remainingWords && (
                <p className="mt-2 text-sm text-red-500">Not enough words remaining. Please upgrade your plan.</p>
              )}
            </Card>

            {isAnalyzing && (
              <div className="w-full space-y-2">
                <div className="flex justify-between text-sm">
                  <span>Analyzing text...</span>
                  <span>{progress}%</span>
                </div>
                <Progress value={progress} className="h-2" />
              </div>
            )}

            {result && (
              <Card className="p-6">
                <div className="space-y-6">
                  <div className="text-center">
                    <h3 className="text-2xl font-bold">{result.humanLikelihood}</h3>
                    <div className="mt-4 relative pt-1">
                      <div className="flex mb-2 items-center justify-between">
                        <div>
                          <span className="text-xs font-semibold inline-block py-1 px-2 uppercase rounded-full text-green-600 bg-green-200">
                            Human
                          </span>
                        </div>
                        <div>
                          <span className="text-xs font-semibold inline-block py-1 px-2 uppercase rounded-full text-red-600 bg-red-200">
                            AI
                          </span>
                        </div>
                      </div>
                      <div className="overflow-hidden h-2 mb-4 text-xs flex rounded bg-gray-200">
                        <div
                          style={{ width: `${result.score}%` }}
                          className="shadow-none flex flex-col text-center whitespace-nowrap text-white justify-center bg-gradient-to-r from-green-500 to-red-500"
                        ></div>
                      </div>
                      <div className="text-center">
                        <span className="text-sm font-semibold">AI Probability: {result.score}%</span>
                      </div>
                    </div>
                  </div>

                  <div>
                    <h4 className="font-semibold mb-2">Analysis:</h4>
                    <p className="text-muted-foreground">{result.analysis}</p>
                  </div>
                </div>
              </Card>
            )}
          </div>
          <Card>
            <CardContent className="p-6">
              <div className="space-y-6">
                <div>
                  <h3 className="text-xl font-bold mb-4">About AI Detection</h3>
                  <p className="text-muted-foreground">
                    Our AI detector analyzes text patterns, vocabulary usage, and sentence structures to determine
                    whether content was likely written by a human or generated by AI.
                  </p>
                </div>

                <div className="space-y-4">
                  <h3 className="font-semibold">How it works:</h3>
                  <div>
                    <p className="font-semibold">Step 1:</p>
                    <p className="text-muted-foreground">Paste the text you want to analyze.</p>
                  </div>
                  <div>
                    <p className="font-semibold">Step 2:</p>
                    <p className="text-muted-foreground">Click Detect AI to start the analysis.</p>
                  </div>
                  <div>
                    <p className="font-semibold">Step 3:</p>
                    <p className="text-muted-foreground">
                      Review the results to see if the text was likely written by a human or AI.
                    </p>
                  </div>
                </div>

                <div>
                  <h3 className="font-semibold mb-2">Accuracy Note:</h3>
                  <p className="text-sm text-muted-foreground">
                    While our detector is highly accurate, no AI detection tool is perfect. Results should be considered
                    as probability rather than absolute certainty.
                  </p>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>
      </main>
      <FeatureShowcase />
      <Hero />
      <FAQ />
    </div>
  )
}
